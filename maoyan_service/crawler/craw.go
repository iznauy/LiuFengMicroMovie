package crawler

import (
	"MaoyanService/dao"
	"MaoyanService/entity"
	"encoding/json"
	"fmt"
	"github.com/andybalholm/cascadia"
	"golang.org/x/net/html"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

const (
	hotListUrl = "https://maoyan.com/films?offset=%d"
	filmUrl = "https://maoyan.com/films/%s"
	commentUrl = "http://m.maoyan.com/mmdb/comments/movie/%s.json"
	cinemaUrl = "https://maoyan.com/cinemas?movieId=%s&offset=%d&showDate=%d-%02d-%02d"
	maoYanUrl = "https://maoyan.com"
)

func craw() {
	// 爬取首页
	filmIds := getFilmIds()

	//for _, id := range filmIds {
	//	fmt.Println(id)
	//}

	// 分别解析每个电影的基本内容
	films := make([]entity.Film, 0)
	for i, id := range filmIds {
		fmt.Printf("进度：%02d/%02d\n", i + 1, len(filmIds))
		film := getFilmInfo(id)
		if film != nil {
			films = append(films, *film)
		}
		time.Sleep(1 * time.Second)

		cinemas := getCinemas(id)
		films[i].CinemaInfos = cinemas
		time.Sleep(1 * time.Second)

		comments := getComments(id)
		films[i].Comments = comments
		time.Sleep(1 * time.Second)
	}

	// 分别抓取每个电影的评论信息
	//for i, id := range filmIds {
	//	comments := getComments(id)
	//	films[i].Comments = comments
	//	time.Sleep(1 * time.Second)
	//}

	//fmt.Println(films)
	//
	//// 分别抓取每个电影的影院信息
	//for i, id := range filmIds {
	//	cinemas := getCinemas(id)
	//	films[i].CinemaInfos = cinemas
	//	time.Sleep(1 * time.Second)
	//}

	// 持久化数据
	dao.SaveFilms(films)
}

func getComments(id string) []entity.Comment {
//	fmt.Println(id)
	content, err := getByteSlice(fmt.Sprintf(commentUrl, id))
	if err != nil {
		log.Println(err)
		return nil
	}
	templateComments := new(AutoGeneratedComments)
	err = json.Unmarshal(content, templateComments)
	if err != nil {
		log.Println(err)
		return nil
	}
	return templateComments.ToCommentList()
}

func getFilmInfo(id string) *entity.Film {
//	fmt.Println(id)
	root := getContent(fmt.Sprintf(filmUrl, id))
	if root == nil {
		return nil
	}

	film := new(entity.Film)

	// header
	banner := cascadia.MustCompile(".banner").MatchFirst(root)

	// 海报
	avatarAttributes := cascadia.MustCompile(".avatar").MatchFirst(banner).Attr
	for _, attr := range avatarAttributes {
		if attr.Key == "src" {
			film.PicUrl = attr.Val
			break
		}
	}

	// 名称
	film.Name = cascadia.MustCompile(".name").MatchFirst(banner).FirstChild.Data

	// 英文名
	film.EnName = cascadia.MustCompile(".ename").MatchFirst(banner).FirstChild.Data

	// 三项属性
	lstNodes := cascadia.MustCompile(".movie-brief-container>ul>li").MatchAll(banner)
	film.Categories = lstNodes[0].FirstChild.Data
	film.Len = strings.Split(lstNodes[1].FirstChild.Data, "/ ")[1]
	film.ReleaseTime = lstNodes[2].FirstChild.Data

	movieIndexNodes := cascadia.MustCompile(".movie-stats-container>.movie-index").MatchAll(banner)
	// 评分
	if cascadia.MustCompile(".movie-index-title").MatchFirst(movieIndexNodes[0]).FirstChild.Data == "用户评分" {
		film.HasScored = true
		scoreNode := cascadia.MustCompile(".index-left>span").MatchFirst(movieIndexNodes[0])
		if scoreNode != nil {
			film.Score = scoreNode.FirstChild.Data
			film.ScoreCount = cascadia.MustCompile(".index-right>.score-num>span").
				MatchFirst(movieIndexNodes[0]).FirstChild.Data
		} else {
			film.HasScored = false
		}
	}
	// 票房
	unitNode := cascadia.MustCompile(".stonefont").MatchFirst(movieIndexNodes[1])
	if unitNode != nil {
		film.TicketOffice = unitNode.FirstChild.Data + unitNode.NextSibling.FirstChild.Data
	} else {
		film.TicketOffice = "暂无数据"
	}

	// 内容
	content := cascadia.MustCompile(".main-content").MatchFirst(root)

	film.Description = cascadia.MustCompile(".dra").MatchFirst(content).FirstChild.Data

	film.Directors = cascadia.MustCompile(".name").MatchFirst(content).
		FirstChild.Data

	// 全局标识
	film.OverAllId = getGlobalUniqueId(film.Name)

	return film
}

func getGlobalUniqueId(name string) int64 {
	u := url.Values{}
	u.Set("name", name)
	resp, err := http.Get("http://localhost:8888/?" + u.Encode())
	if err != nil {
		log.Println(err)
		return 0
	}
	defer resp.Body.Close()
	info, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
		return 0
	}
	id, err := strconv.ParseInt(string(info), 10, 64)
	if err != nil {
		panic(err)
	}
	return id
}

func getByteSlice(url string) ([]byte, error) {
	resp, err := http.Get(url)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("error: unexpected status code: %d\n", resp.StatusCode)
	}
	content, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	return content, nil
}

func getContent(url string) *html.Node {
	resp, err := http.Get(url)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		log.Printf("error: unexpected status code: %d\n", resp.StatusCode)
		return nil
	}
	doc, err := html.Parse(resp.Body)
	if err != nil {
		log.Println(err)
		return nil
	}
	return doc
}

func getFilmIds() []string {
	ids := make([]string, 0)
	currOffSet := 0
	for {
		currIds, nextOffSet := getFilmIdsFromSinglePage(currOffSet)
		ids = append(ids, currIds...)
		if nextOffSet == -1 {
			break
		}
		time.Sleep(1 * time.Second)
		currOffSet = nextOffSet
	}
	return ids
}

func getFilmIdsFromSinglePage(offset int) (ids []string, nextOffSet int) {
	url := fmt.Sprintf(hotListUrl, offset)
	root := getContent(url)

	if root == nil {
		nextOffSet = -1
		return
	}

	// 扫描当前页的电影 id
	tableSelector := cascadia.MustCompile(".movie-item>a")
	rows := tableSelector.MatchAll(root)
	for _, row := range rows {
		attrs := row.Attr
		for _, attr := range attrs {
			if attr.Key == "href" {
				ids = append(ids, strings.Split(attr.Val, "/")[2])
			}
		}
	}

	// 查看是否还有下一页
	nextOffSet = -1
	pageSelector := cascadia.MustCompile(".list-pager>li>a")
	pages := pageSelector.MatchAll(root)
	for _, page := range pages {
		pageName := page.FirstChild.Data
		if pageName == "下一页" {
			nextOffSet = offset + 30
			break
		}
	}
	return
}


func getCinemas(id string) []entity.CinemaInfo {
	cinemaInfos := make([]entity.CinemaInfo, 0)
	currOffSet := 0
	for {
		currCinemas, nextOffSet := getCinemasFromSinglePage(currOffSet, id)
		cinemaInfos = append(cinemaInfos, currCinemas...)
		if nextOffSet == -1 {
			break
		}
		time.Sleep(1 * time.Second)
		currOffSet = nextOffSet
	}
	return cinemaInfos
}

func getCinemasFromSinglePage(offset int, id string) (cinemaInfos []entity.CinemaInfo, nextOffSet int) {
//	fmt.Println(offset, id)
	url := fmt.Sprintf(cinemaUrl, id, offset, time.Now().Year(), time.Now().Month(), time.Now().Day())
	root := getContent(url)

	if root == nil {
		nextOffSet = -1
		return
	}

	cinemaNodes := cascadia.MustCompile(".cinema-cell").MatchAll(root)

	for _, cinemaNode := range cinemaNodes {
		cinemaInfo := new(entity.CinemaInfo)
		linkNode := cascadia.MustCompile(".cinema-info>a").MatchFirst(cinemaNode)
		attrs := linkNode.Attr
		for _, attr := range attrs {
			if attr.Key == "href" {
				cinemaInfo.Url = maoYanUrl + attr.Val
				break
			}
		}
		cinemaInfo.Name = linkNode.FirstChild.Data
		cinemaInfo.Position = linkNode.NextSibling.NextSibling.FirstChild.Data
		cinemaInfo.Price = "￥" + cascadia.MustCompile(".price-num>span").MatchFirst(cinemaNode).FirstChild.Data + "起"

//		fmt.Println(cinemaInfo)

		cinemaInfos = append(cinemaInfos, *cinemaInfo)
	}

	nextOffSet = -1
	pageSelector := cascadia.MustCompile(".list-pager>li>a")
	pages := pageSelector.MatchAll(root)
	for _, page := range pages {
		pageName := page.FirstChild.Data
		if pageName == "下一页" {
			nextOffSet = offset + 12
			break
		}
	}
	return
}