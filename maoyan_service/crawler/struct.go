package crawler

import (
	"MaoyanService/entity"
)

type AutoGeneratedComments struct {
	Cmts []struct {
		Approve int `json:"approve"`
		Approved bool `json:"approved"`
		AssistAwardInfo struct {
			Avatar string `json:"avatar"`
			CelebrityID int `json:"celebrityId"`
			CelebrityName string `json:"celebrityName"`
			Rank int `json:"rank"`
			Title string `json:"title"`
		} `json:"assistAwardInfo"`
		Avatarurl string `json:"avatarurl"`
		CityName string `json:"cityName"`
		Content string `json:"content"`
		FilmView bool `json:"filmView"`
		Gender int `json:"gender,omitempty"`
		ID int `json:"id"`
		IsMajor bool `json:"isMajor"`
		JuryLevel int `json:"juryLevel"`
		MajorType int `json:"majorType"`
		MovieID int `json:"movieId"`
		Nick string `json:"nick"`
		NickName string `json:"nickName"`
		Oppose int `json:"oppose"`
		Pro bool `json:"pro"`
		Reply int `json:"reply"`
		Score float64 `json:"score"`
		Spoiler int `json:"spoiler"`
		StartTime string `json:"startTime"`
		SupportComment bool `json:"supportComment"`
		SupportLike bool `json:"supportLike"`
		SureViewed int `json:"sureViewed"`
		TagList struct {
			Fixed []struct {
				ID int `json:"id"`
				Name string `json:"name"`
			} `json:"fixed"`
		} `json:"tagList,omitempty"`
		Time string `json:"time"`
		UserID int `json:"userId"`
		UserLevel int `json:"userLevel"`
		VideoDuration int `json:"videoDuration"`
		VipType int `json:"vipType"`
		AuthInfo string `json:"authInfo,omitempty"`
		VipInfo string `json:"vipInfo,omitempty"`
	} `json:"cmts"`
	Hcmts []struct {
		Approve int `json:"approve"`
		Approved bool `json:"approved"`
		AssistAwardInfo struct {
			Avatar string `json:"avatar"`
			CelebrityID int `json:"celebrityId"`
			CelebrityName string `json:"celebrityName"`
			Rank int `json:"rank"`
			Title string `json:"title"`
		} `json:"assistAwardInfo"`
		AuthInfo string `json:"authInfo"`
		Avatarurl string `json:"avatarurl"`
		CityName string `json:"cityName"`
		Content string `json:"content"`
		FilmView bool `json:"filmView"`
		Gender int `json:"gender,omitempty"`
		ID int `json:"id"`
		IsMajor bool `json:"isMajor"`
		JuryLevel int `json:"juryLevel"`
		MajorType int `json:"majorType"`
		MovieID int `json:"movieId"`
		Nick string `json:"nick"`
		NickName string `json:"nickName"`
		Oppose int `json:"oppose"`
		Pro bool `json:"pro"`
		Reply int `json:"reply"`
		Score float64 `json:"score"`
		Spoiler int `json:"spoiler"`
		StartTime string `json:"startTime"`
		SupportComment bool `json:"supportComment"`
		SupportLike bool `json:"supportLike"`
		SureViewed int `json:"sureViewed"`
		TagList struct {
			Fixed []struct {
				ID int `json:"id"`
				Name string `json:"name"`
			} `json:"fixed"`
		} `json:"tagList"`
		Time string `json:"time"`
		UserID int `json:"userId"`
		UserLevel int `json:"userLevel"`
		VideoDuration int `json:"videoDuration"`
		VipInfo string `json:"vipInfo"`
		VipType int `json:"vipType"`
	} `json:"hcmts"`
	Total int `json:"total"`
}


func (a * AutoGeneratedComments) ToCommentList() []entity.Comment {
	comments := make([]entity.Comment, 0)

	// hot comments
	for _, rawComment := range a.Hcmts {
		comment := entity.Comment{
			Content: rawComment.Content,
			Time: rawComment.Time,
			UserName: rawComment.NickName,
			Score: rawComment.Score,
		}
		comments = append(comments, comment)
	}

	// general comments
	for _, rawComment := range a.Cmts {
		comment := entity.Comment{
			Content: rawComment.Content,
			Time: rawComment.Time,
			UserName: rawComment.NickName,
			Score: rawComment.Score,
		}
		comments = append(comments, comment)
	}

	return comments
}